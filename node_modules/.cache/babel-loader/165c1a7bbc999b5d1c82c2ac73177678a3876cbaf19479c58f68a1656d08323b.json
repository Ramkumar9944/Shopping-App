{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  items: []\n};\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart(state, action) {\n      const itemIndex = state.items.findIndex(item => item.id === action.payload.id);\n      if (itemIndex > 0) {\n        state.items[itemIndex].quantity++;\n      } else {\n        state.items.push({\n          ...action.payload,\n          quantity: 1\n        });\n      }\n    },\n    removeFromCart(state, action) {\n      const itemIndex = state.items.findIndex(item => item.id === action.payload.id);\n      if (state.items[itemIndex].quantity === 1) {\n        state.items.splice(itemIndex, 1); //Removing 1 element starting from from item index\n      } else {\n        state.items[itemIndex].quantity--;\n      }\n    }\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart\n} = cartSlice.actions;","map":{"version":3,"names":["createSlice","initialState","items","cartSlice","name","reducers","addToCart","state","action","itemIndex","findIndex","item","id","payload","quantity","push","removeFromCart","splice","actions"],"sources":["/home/ram/Documents/Ghost/Frontend/redux-ts/src/store/cart-slice.ts"],"sourcesContent":["import { createSlice, type PayloadAction } from \"@reduxjs/toolkit\";\n\ntype CartItem = {\n  id: string;\n  title: string;\n  price: number;\n  quantity: number;\n};\n\ntype CartState = {\n  items: CartItem[];\n};\n\nconst initialState: CartState = {\n  items: [],\n};\n\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart(\n      state,\n      action: PayloadAction<{ id: string; title: string; price: number }>\n    ) {\n      const itemIndex = state.items.findIndex(\n        (item) => item.id === action.payload.id\n      );\n\n      if (itemIndex > 0) {\n        state.items[itemIndex].quantity++;\n      } else {\n        state.items.push({ ...action.payload, quantity: 1 });\n      }\n    },\n    removeFromCart(state, action: PayloadAction<{ id: string }>) {\n      const itemIndex = state.items.findIndex(\n        (item) => item.id === action.payload.id\n      );\n\n      if (state.items[itemIndex].quantity === 1) {\n        state.items.splice(itemIndex, 1); //Removing 1 element starting from from item index\n      } else {\n        state.items[itemIndex].quantity--;\n      }\n    },\n  },\n});\n\nexport const { addToCart, removeFromCart } = cartSlice.actions;\n"],"mappings":"AAAA,SAASA,WAAW,QAA4B,kBAAkB;AAalE,MAAMC,YAAuB,GAAG;EAC9BC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAAC;EACnCI,IAAI,EAAE,MAAM;EACZH,YAAY;EACZI,QAAQ,EAAE;IACRC,SAASA,CACPC,KAAK,EACLC,MAAmE,EACnE;MACA,MAAMC,SAAS,GAAGF,KAAK,CAACL,KAAK,CAACQ,SAAS,CACpCC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EACvC,CAAC;MAED,IAAIH,SAAS,GAAG,CAAC,EAAE;QACjBF,KAAK,CAACL,KAAK,CAACO,SAAS,CAAC,CAACK,QAAQ,EAAE;MACnC,CAAC,MAAM;QACLP,KAAK,CAACL,KAAK,CAACa,IAAI,CAAC;UAAE,GAAGP,MAAM,CAACK,OAAO;UAAEC,QAAQ,EAAE;QAAE,CAAC,CAAC;MACtD;IACF,CAAC;IACDE,cAAcA,CAACT,KAAK,EAAEC,MAAqC,EAAE;MAC3D,MAAMC,SAAS,GAAGF,KAAK,CAACL,KAAK,CAACQ,SAAS,CACpCC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EACvC,CAAC;MAED,IAAIL,KAAK,CAACL,KAAK,CAACO,SAAS,CAAC,CAACK,QAAQ,KAAK,CAAC,EAAE;QACzCP,KAAK,CAACL,KAAK,CAACe,MAAM,CAACR,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;MACpC,CAAC,MAAM;QACLF,KAAK,CAACL,KAAK,CAACO,SAAS,CAAC,CAACK,QAAQ,EAAE;MACnC;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAER,SAAS;EAAEU;AAAe,CAAC,GAAGb,SAAS,CAACe,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}